Amit Badlani
David McLaren
Tomas Forsyth Rosin
CS348A HW3, Winter 2014

Problem 2.

The code is organized in exactly the same way as before, with all worked dumped into the main-torus.cpp file.

The code works pretty much exactly as expected and is filled in where indicated. I found the first set of points for section 1 with math, then reasoned that to get points in other quadrants I could flip the Y and/or Z coordinate, and it worked. For section 2 I added an Interpolate () function and implemented the bivariate interp based on our notes. In section 3 I added pairs of triangles in the obvious way.

Both sections of the extra credit are implemented. For part 1, I figured out through trial and error the correct orientations for rendering triangles to get the correct normals. For part 2, I checked if vertices with i or j = 0 or LOD-1 had already had a vertex generated in the same place, on a quadrant connected on either the Y or Z axis. I figured out that we could reuse the same i or j index, grab a vertex handle off a quadrant generated in an earlier cycle, and reuse that for the mesh. Since the duplicate vertices are no longer generated the mesh is now connected properly.

Problem 4.

TODO

--- Begin original README ---

CS 348a Homework 3:
-------------------

-Torus Construction:
For this part of the assignment you will be constructing a torus using OpenMesh.  There are three sections you must fill in, which are clearly marked in RenderTorus/src/main-torus.cpp.

To run this code, simply navigate to the RenderTorus directory and type "make" at the command line.  To run the viewer, type:

	./renderTorus

-Principal Curvatures and Directions:
For this part, you will compute principal curvatures and directions on triangle meshes using the algorithm described in Taubin's "Estimating the Tensor of Curvature of a Surface from a Polyhedral Approximation."

There are three slots in need of your code, which are marked clearly.  Two are in renderMesh() in ComputeCurvature/src/main-curvature.cpp and the third is in ComputeCurvature/src/curvature.cpp.

This code is designed to compile on the Myth machines.  To do so, simply type "make" at the command line from your ComputeCurvature directory.  Then, to run the viewer, type:

	./drawMesh models/horse.off 
	
at the command line, where models/horse.off is the model you wish to use.

The easiest way to get started is to write your code on a Myth machine, either in person or via SSH with X forwarding.  If you prefer to work on your personal machine, you will need to modify makefile.in to point to the proper libraries.  The CAs can help you get started.  However, we recommend that you have experience compiling and linking programs locally if you decide on the second option, as it may eat up valuable time.
